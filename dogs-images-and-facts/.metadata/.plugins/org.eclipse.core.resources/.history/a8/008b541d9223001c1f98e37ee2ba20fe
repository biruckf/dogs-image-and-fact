package com.codeTest.dogsImageAndFact.service;

import java.nio.charset.StandardCharsets;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.reactive.ClientHttpRequest;
import org.springframework.web.reactive.function.BodyInserter;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestBodySpec;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import org.springframework.web.reactive.function.client.WebClient.UriSpec;

import com.codeTest.dogsImageAndFact.dogsUtil.ModelMapperUtil;
import com.codeTest.dogsImageAndFact.model.DogsFact;

import reactor.core.publisher.Mono;

public class DogsServiceImpl implements DogsService {

	@Override
	public ModelMapperUtil getListOfDogsImagesAndFacts(int number) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public List<DogsFact> getDogsFact(int number){
		
		List<DogsFact> dogsFact;
		
		WebClient client = WebClient.create();
		UriSpec<RequestBodySpec> uriSpec = client.method(HttpMethod.GET);
		RequestBodySpec bodySpec = uriSpec.uri("https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=" + number);
		
		RequestHeadersSpec<?> headersSpec = bodySpec.bodyValue("data");
		
		ResponseSpec responseSpec = headersSpec.header(
			    HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
			  .accept(MediaType.APPLICATION_JSON)
			  .acceptCharset(StandardCharsets.UTF_8)
			  .retrieve();
		
		Mono<String> res = headersSpec.exchangeToMono(response -> {
			  if (response.statusCode()
			    .equals(HttpStatus.OK)) {
			      return response.bodyToMono(String.class);
			  } else if (response.statusCode()
			    .is4xxClientError()) {
			      return Mono.just("Error response");
			  } else {
			      return response.createException()
			        .flatMap(Mono::error);
			  }
			});
		
		System.out.println(res); 
		
		return ModelMapperUtil.mapList(res, DogsFact.class);
	}

}
